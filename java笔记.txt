1.java的三大平台：
  a1. JavaSE (java标准版)
  a2. JavaEE也称J2EE(Java的企业版)
  a3. JavaME（赛班系统）
2.配置环境变量
  path=指向jdk/bin目录
  classpath=指向java源文件路径
3.编写java程序
   public class Hello{
      public static void main(String[] args){
          System.out.println("你好，今天开始学习java");
     }

 }
4.java程序的执行过程
  .java---->编译阶段---->.class字节码---运行阶段----->结果
        javac命令                        java命令

Hello.java
编译：  javac Hello.java----->Hello.class
运行：  java Hello
5.输出语句：
  System.out.print(); //输出内容不换行
  System.out.println(); //输出内容之后换行
6.转义字符

   a1.\n  表示换行
   a2. \t 表示水平制表符(空格)
  System.out.print("Hello\n");


7.java的注释
  a1.//单行注释
  a2./*
      *多行注释：用来注释类，方法，属性
      */

  a3./**
       *文档注释:用来注释类，方法，属性
       */

8.java命名规范
  类的命名：  首字母大写，如果是多个单词拼接而成，每个单词的首字母都要大写
    例：  Hello  ,HelloWorld ,StuScore
  方法命名：  首字母小写，多个单词拼接而成，后续每个单词首字母要大写
    例：   shopping() ,getScore();
  变量命名：与方法命名相同
           score, stuScore



   
************************************************************************



public class 类名{
  public static void main(String[] args){


  }

}

1.标识符:给对象取的名称(可能是类名，方法名，接口名，属性名等)
2.标识符的命名规则：
  a1.必须以字母，数字，下划线_,美元$  符号所组成 ，不能以数字开头
  a2.不能是java中的关键字(也叫保留字)

例：  _name (Y), 2a (N), float (N), $citys (Y), stuName (Y), stu1(Y), my_name(Y), static (N),

     5_f (N),goto

3.java中的关键字

4.变量:在内存中开辟一个空间，保存要运算的数据
     
    单人间  301 = 我
    标准间  501 = 一家人
    总统套房  101 = 夫妻 

    int    money = 1000;
   数据类型  变量名  值

  变量的三要素：a1.数据类型  a2.变量名  a3.值

 定义变量的步骤：
    第一步：声明一个变量 : double num;
    第二步：给变量赋值:  num = 5.5;
  两步合一步：声明变量时并赋值：  double num = 5.5; 

常量：在内存中开辟一个空间，保存要运算的数据，但它的值永远不发生变量
  final  double PI=3.14;

常量的定义：  final 数据类型  常量名 = 值;

   
5.常用的数据类型(数值类型和非数值类型)
  a1.基本数据类型
       byte,short,int,long,  float,double,char,boolean
字节数： 1    2     4   8       4    8      2
位数：   8   16     32  64      32   64    16

  byte a = 5;[-128,127] 
  short s = 5;
  int  i = 5;
  long l = 5;
  float num = 5.2f;
  double num2  = 5.2;
  char c = 'A';

 double PI=3.14;


  a2.引用数据类型 (类，接口，数组)   

6.得到键盘输入数据
 第一步：得到Scanner的对象:
   Scanner input = new Scanner(System.in);

 第二步：从键盘得到数据,调用input对象的nextXxx();

    String str =  input.nextLine(); //得到一个字符串,得到一行字符串
    String str =  input.next(); //得到一个字符串,遇到空格会断开，空格后面的字符串得不到
    byte b = input.nextByte(); //得到byte类型的整数
    short s = input.nextShort(); //得到short类型的整数
    int i = input.nextInt(); //得到int类型的整数
    long l = input.nextLong(); //得到long类型的整数

    float f = input.nextFloat() ; //得到float类型的小数
    double d = input.nextDouble() ;//得到double类型的小数
    boolean b = input.nextBoolean(); //得到boolean类型的数据

类型转换：
   a1.自动类型转换
      int a = 5;
      double d = a;


   a2.强制类型转换
     double d = 5;
     int a = d;

6.运算符
  a1.算术运算符(+,-,*,/, %)
  
  a2.比较运算符（>,<,>=,<=,!=,== ）

  a3.逻辑运算符( &&,||,!)

  表达式1 && 表达式2   
  
 int yuScore = 91;
 int shuSoce = 99;


  语文成绩>=90 || 数学成绩>=95
   

  boolean flag =  !(91>=90)


  a4.赋值运算符( = ,+=,-=,/= ,*=,/=)
  

  int a = 5;
  a = a+2; //等同于 a+=2;  
  a = a-2; //等同于 a-=2;
  a=a*2;  //等同于a*=2;
  
 ++,-- 自加和自减:
  ++，--符号在操作数之前，表示先自加或自减；再操作;
  反之：表示先操作，再自加或自减
  
 例： int a = 5;
     // int b = a++; //b=5;  a=6
     // int c = ++a;  // a=6, c = 6
    // int b = a--;  // b= 5  a = 4
       int b = --a;    // a=4; b = 4


  a5.三目运算符
    语法：表达式1 ?(表达式2):（表达式3）


   解决方案：总页数=(总记录数%每页显示==0)?(总记录数/每页显示):(总记录数/每页显示  +1)

      
    总记录数=31条
    每页显示=5；

    if（总记录数%每页显示==0）{
      总页数 = 总记录数/每页显示
   }else if（总记录数%每页显示!=0）{
    总页数 = 总记录数/每页显示+1

   }
    
  a6.位运算符
  
   表示数据：二进制，八进制，十进制，十六进制

  十进制数：22,31,18,55,26,19


  
  
************************************************************************



1.标识符（给类，接口，包，方法，属性....）取名字
  规则：a1.字母，数字，_,$所组成，不能数字开头，不能java中的保留字
        a2.最好见名知义，长度适中
   
2.变量：在内存中开辟空间来保存要运算（存储）的数据
  第一步：声明变量
      int a;
   第二步：给变量赋值
      a = 10;
  两步合一步： int a = 10;
  变量的三要素： 数据类型  变量名 = 值；

3.数据类型
   a1.基本数据类型
      byte,short,int,long ,float,double,char,boolean
字节： 1     2    4    8     4     8      2

long num = 10;
float f = num;

   a2.引用数据类型(类，接口，数组)



4.运算符
 a1.算术（+，-，*，/,%,++,--）
 a2.比较 (>,<,>=,<=,==,!=)
 a3.逻辑(&&,||,!)
 a4.赋值(=,+=,-=,...)
 a5.三目 (表达式1？表达2：表达式3)
 a6.位

-------------------------------------------------------------------------------
流程控制语句
  a1.顺序结构
  a2.选择结构
    b1.单分支选择结构
     语法：  
      if（条件）{

            代码块
       }


    b2.双分支选择结构
  语法：  
      if（条件）{

            代码块1
       }else{

            代码块2

     }

    b3.多分支选择结构
    语法：  
      if（条件1）{

            代码块1
       }else if(条件2){

            代码块2

     }else if(条件3){

            代码块3

     }else{
        代码块n
    }
   
  产生随机数：
  方法一：Math.random(); //产生的是[0,1.0)之间的随机数
  方法二：Random rand = new Random();  
         int a = rand.nextInt(num) //产生的是[0,num)的随机整数
   
   area = PI*r*r
   area = PI*Math.pow(r,2);
  
   b4.switch-case 多分支:用于等值判断的情况
   语法：
    switch(表达式){
     case 常量1：
         代码块1
         break;
     case 常量2：
         代码块2
         break;
     case 常量3：
         代码块3
         break;
     ...
     case 常量n：
         代码块n
         break;
     default:
         以上条件都不满足，执行此处
        break;

  }
  特点：
    a1.用于等值判断的情况
    a2.case 后的常量不相同
    a3.switch中的表达式只能支持:整型(byte,short,int)和字符型(char),从jdk1.7开始支持String类型



  a3.循环结构
     什么是循环：表示重复执行指定的操作
     
    循环的四要素 b1.循环变量的初始值 
               b2.循环条件
               b3.循环的操作
               b4.迭代部分

   循环的分类：
     b1.while
         语法：

             循环变量的初始值
             while(循环条件){
                 循环的操作
                 迭代部分
             }
特点：  先判断再执行，如果初始条件不满足，则一遍循环都不会执行
     b2.do-while
     语法：
        循环变量的初始值
        do{
             循环的操作
             迭代部分

        }while(循环的条件);
    
特点：先执行，再判断  ，如果初始条件不满足，则至少会执行一遍循环


     b3.for


  

********************************************************************



回顾：
  1.选择结构
     a1.单分支
      if(条件){
        代码块

    }
    a2.双分支
       if(条件){
        代码块1

    }else{
        代码块2

     }
    a3.多分支
     if(条件1){
        代码块1

    }else if(条件2){
  代码块2
     }
    ...
    else if(条件n){
      代码块n
    }else{
    以上都不满足时，执行此处

    }
  适用场合：区间的判断
   if(条件1){
    代码块1
    }
   if(条件2){
    代码块2
    }
   if(条件3){
    代码块3
    }
switch-case:
  语法：
  switch(表达式){
   case 常量1:
      代码块
      break;
    case 常量2:
      代码块2
      break;
    ....
   case 常量n:
      代码块n
      break;
   default:
     代码块....
     break;

  }

 特点：a1.只能用于等值判断的情况
       a2.表达式只能是整型(byte,short,int)和字符型(char)和枚举,从jdk1.7开始支持String

  2.循环结构

    a1.while循环
   循环变量初值
    while(循环条件){
       循环的操作
       迭代部分
   }
   特点：先判断再执行，如果初始条件不满足时，一遍循环都不执行  
   a2.do-while循环
    循环变量初值
    do{
       循环的操作
       迭代部分
   }while(循环条件);  
 特点：先执行再判断，如果初始条件不满足时，至少执行一遍循环 


  a3.for循环
   语法：
    for(循环变量的初始值;循环条件;迭代部分){
      循环的操作
    }

 特点：先判断再执行，如果初始条件不满足时，一遍循环都不执行  
 

for,while,do-while适用场合
 a1.当已知循环次数时，优先选择for循环;
 a2.当循环次数未知时，选择while或do-while；当先必须要执行一遍循环操作再来决定是否还要循环时，选择do-while;

------------------------------------------------------------------------
1.断点调试
  a1.加断点
  a2.以调试的方式运行程序，观察变量的变化
  记快捷键：   F5：单步进入
              F6:单步跳过
              F8: 只执行断点
  


2.break,continue,return关键字的用法
  break使用场合：
   a1.用于switch-case语句中，表示跳出switch-case结构
   a2.用于循环语句，表示结束循环（或者叫跳出循环）



 需求：输入张三这个学生3门课的成绩，计算总分和平均分,当成绩输入不合法时（如负数），结束程序
   
    for(int i=1;i<=3;i++){
     //输入成绩
     累加
  }
  求平均分


3.二重循环
 
   



******************************************************************




1.什么是数组
 答：在内存中开辟一段连续的内存空间，来保存一组相同类型的数据

 特点：a1.数组的内存空间是连续
       a2.数组存的是相同类型的数据
       a3.数组一旦声明，长度固定，不能动态扩容
2.使用数组
  第一步：声明数组 ：数据类型[]  数组名; 或者   数据类型  数组名[];
      例：  int[]   a; 或者  int a[];

  第二步：给数组开辟空间  :  数组名 = new 数据类型[长度]
      例：    a = new int[5];

 第一步和第二步合为一步： int[] a = new int[5]; //数据类型[]  数组名 = new 数据类型[长度]

  第三步：向数组中保存数据

       a[0] = 100;
       a[1] = 95;
       a[2] = 82;
       ...
       a[4] = 76;

    数组名[下标] = 值；

3.数组的四要素:
        a1.数组的类型
        a2.数组名
        a3.长度( 下标的范围)
        a4.数组的元素

4.数组的初始化（给数组赋值）
  a1.静态初始化:在定义数组时，已知数组的元素，就直接将元素存到数组中
    int[] scores = {92,86,66,87,90};
   或者：
   int[] scores =new int[] {30,18,9,22,15}; 
    
  a2.动态初始化
     int[] a = new int[5]
     a[0] = 92;
     a[1] = 80;
     ...

   
5.求数组中元素的最大值，最小值
  方法一：打擂台的方式
  方法二：Arrays.sort()对数组排序
  方法三：冒泡排序


6.冒泡排序：
n = 5;个数


       轮数       次数 
        i=0       j=4
        i=1       j=3
        i=2       j=2
        i=3       j=1
        i         j=n-i-1


5个数，比较4轮
6个数，比较5轮
n个数，比较n-1轮
int[] scores = {30,18,9,22,15};

for(int i=0;i<scores.length-1;i++){
   for(int j=0;j<scores.length-i-1;j++){
       if(scores[j]>scores[j+1]){
       int temp = scores[j];
       scores[j]=scores[j+1];
       scores[j+1]= temp;

    }

    }

}
口诀：n个数来排队，两两相邻进行比较，小的在前，大的靠后；
     外层循环n-1;内层循环n-1-i

7.基本数据类型的默认值：
 byte,short,int,long,float,double,char,boolean

 byte,short,int,long  默认值：0
 float,double 默认值：0.0
 char 默认值：\u0000
boolean 默认：false




*******************************************************************


回顾：
1.数组声明： int[] num;
  数组开辟空间: num = new int[5];
 两步合一步：int[] num = new int[5];

2.数组的初始化：
  a1.静态初始化： int[] nums = {1,2,3,4,5};
  a2.动态初始化：int[] num = new int[5];
   a[0] = 10;
   a[1] = 20;

3.求数组元素最大值，最小值
  a1.打擂台
  a2.Arrays.sort()
  a3.冒泡排序

冒泡排序口诀：n个数来排队，外层循环n-1,内层循环n-1-i
 int[] nums = {1,2,3,4,5};
 for(int i=0;i<nums.length-1;i++){
    for(int j=0;j<nums.length-1-i;j++){
        if(nums[j]>nums[j+1]){
          int temp = num[j];
          nums[j] = nums[j+1];
          nums[j+1]=temp;
        }

     }
 }
4.数组特点：
  a1.数组保存相同类型的数据
  a2.内存空间连续
  a3.数组的长度固定

5.使用Arrays类操作数组，常用的方法
  a1.sort(); //升序排列
  a2.fill(); //填充数组
  a3.copyOf(); //复制数组中的元素
  a4.copyOfRange(); //从指定位置开始复制数组元素
  a5.binarySearch(); //搜索数组中的元素是否存在，前提是数组中的元素要先排序
  a6.toString();//将数组的元素转成字符串
 
6.二维数组

数据类型[][]   数组名 = new 数据类型[长度][长度2];

1.定义：
  第一步：声明数组：  数据类型[][]   数组名 ;  例：int[][] a;或 int a[][];
  第二步：开辟空间： 数组名 = new 数据类型[长度][长度2];  例： a = new int[3][4]    
2.二维数组的初始化                                                            a = new int[3][];
  a1.静态初始化
     int[][] a = {{20,30,40},{10,15,20},{30,40,50,40}};
     或者：int[][] scores = new int[][]{{90,80},{85,91,88,67,75},{60,72,55}};

     String[][] s = {{"a","hello"},{"world","java","oracle"},{"html"}};
  a2.动态初始化
  规则的矩阵：
  int[][] a = new int[3][4];
  a[0][0] = 20;
        a[0][1] = 30;
        ...
  不规则的矩阵：

     int[][] a = new int[3][];
  a[0] = new int[2];
        a[0][0]=20;
        a[0][1]=30;

  a[1] = new int[3];
  a[2] = new int[4];
      
java中的注释或解注释：ctrl+/





******************************************************************






类与对象

1.什么是对象？
  万物皆为对象
2.对象包括？
  a1.属性特征
      名字：脉动  String name="脉动"
      颜色：蓝色  String color = "蓝色";
      容量：600ml  int rongLiang = 600;
      形状：瓶子状  String shape = "瓶子状";
     
  a2.行为或功能
     功能：解渴


灯：
  特征：
    颜色：白色  String color = "白色";
    质地：玻璃  String zhiDi = "玻璃";
    形状：长方体 String shape = "长方体";
    
  行为或功能：照明


3.类：将具有相同属性和行为的对象作为一个集合
  类是一个抽象的概念，是模板，不是具体的实例

对象是具体的实例

      实例化
对象<-------类
    ------->
     抽象

(具体)    (抽象)

笔记本电脑对象
   cup型号: 
   内存容量
   屏幕尺寸
   
功能：
   数据存储
   运算
   办公
   上网
   打游戏
  。。。

 电脑1，电脑2，.....,电脑n---->电脑类
 徐元富，张三，李四，王五---->人类
 
4.类里面有什么？
   a1.属性-------------->变量也叫成员变量
   a2.行为或功能-------->方法


 public class Dog{
    String name = "旺财";
    String color = "白色";
    String brain = "中华田园犬";
    String sex = "公的";
    
    /**
      叫
     */
    public void bark(){
      System.out.println(name+"在叫");

   }
}

5.类的定义：
   public class 类名{
    属性1
    属性2
    ....
    方法1();
    方法2();
   ...
  }
6.如何使用类
     第一步：创建类的对象
     第二步：对象名.属性； //调用属性 
             对象名.方法名(); //调用方法

7.类与对象的关系
                抽象
    对象------------------>类
    (具体) <------------ (抽象)             
                实例化

8.方法的定义
  访问修饰符 返回值类型 方法名（形参列表）{
    方法体
  }

  public String zhaZhi(String fruit){
    reutn fruit+"汁";
  }




  ****************************************************************



1.封装
    a.概念：将类的成员有选择性进行隐藏
    b.实现封装
        i.    私有化属性
        ii.   创建setter/getter方法，如果一个属性为xxx，
        那么setter/getter方法：setXxx(),getXxx
        iii.  
    c.封装的优势
        i.    保证数据的保密性
        ii.   保证数据的有效性
        ii.   程序结构更友好，符合OO(object Otiented)思想
        （OOA Analysize、OOP Programming、OOT Test）
2.构造方法
    a.概念：
        是一种特殊的方法，当实例化对象时自动执行用于初始化属性的方法。
    b.特征
        i.    与类名同名
        ii.   没有返回类型
        iii.   可以重载
        iv.   在实例化对象时自动执行
        v.    不能显式调用
        vii.    当类没有写构造方法，编译器自动生产一个缺省的构造方法，有构造方法，编译器不会自动生成构造方法
        vi.   一般构造方法时Public,但也可以是private，如果是private,则该类不能在类的外部实例化--单例模式

    c.使用
        i.    一个缺省的构造方法
        ii.   一个带参数的构造方法（有多少个属性，就带多少个参数）

3.包
    a.概念
      就是用来组织和管理类的一个对象，可以理解为windows操作系统下的文件夹。包里包含类，还可以包含子包。
    b.特征
      i.  命名全部小写
      ii. 有层级关系，通过“.”号进行分隔
      iii. 一般按照组织名称的域名倒写为命名规则。比如com.microsoft.sqlserver.jdbc; com.zhilingit.javagroup.ajapp
    
    c.创建包
      i.  创建包：package 包名;
      ii. 导入包：import 包名.*;  import 包命.类名;

    d.注意事项
      i.  先创建包的语句：package 包名;
      ii. 再导入包语句:import 包名.*;
      iii.创建类：public class 类名{}；

    src:  source 源码
    bin:  binary 可执行文件
    lib:  libray  库文件
    samples:  案例
4.访问修饰符
    a.概念：
      用来限制类的成员的访问级别的一种标识符。
    b.种类：
      i.    private私有：限制级别最高，只能在类的本部访问
      ii.   protected:专门用于继承使用，子类里面可以直接访问
      iii.  缺省
      iv.   public公共：限制级别最低，任何地方都可以访问
    c.访问修饰符限制访问表
                同一类       同一包       子类          任何地方
  private         y                 
  缺省             y              y 
  protected       y             y         y
  public          y             y         y               y
    d.注意事项
      i.    缺省访问修饰符的含义

5.static
    a.概念：
      表示类的成员，所有对象共享的一种成员标识，与之对应的就是动态类型，
      一般说成非静态成员，或者对象成员
    b.static 类型
      i.    属性： static只能修饰成员变量，不能修饰局部变量
      ii.   方法: 类的方法，可以通过类名访问
      iii.  程序块
    c.注意事项
      i.    访问方式： 类名.静态成员变量； 类名.静态成员方法(); 也可以用对象进行访问
      ii.   静态方法只能访问静态成员，不能访问非静态成员
      iii.  非静态方法可以访问静态和非静态成员
      iv.   静态属性在第一次使用类时进行初始化，并且只初始化一次，一般放在静态程序
            块进行初始化
6.重载
    a. 概念：在同一个类中，多个方法的方法名相同，参数列表不同，成为方法重载
    b.重载的条件
      i.    必须载同一个类里面
      ii.   方法名必须相同
      iii.  参数列表必须不同：参数类型不同或者参数个数不同
    c.注意事项
      i.    返回值不同，不能作为重载的条件：参数相同（个数，类型相同），返回类型不同，不能构成重载
      ii.   参数列表相同，参数名称不同，也不能构成方法重载
    d.优势
      i.  减少对方法名称的记忆
      ii. 调用时，自动匹配相应的重载方法，根据参数类型和个数自动匹配
7.this
    a.含义：
      是一个系统内置的对象，不需要定义；标识当前类的一个对象
    b.使用
      i.    this对象可以直接访问当前类的成员   
      ii.   在局部变量与属性同名时，用  this.属性 表示调用的是类的属性值，局部变量直接调用：局部变量优先
      iii.  this(),this(参数)  表示调用当前类的构造方法，但是该语句只能在构造方法中的
      第一句，不能在其他位置
    c.注意事项
      i.    this不能在静态方法中使用
      ii.   this不能访问局部变量



********************************************************************



0.继承 
    a.一个类拥有另外一个类的成员的方式，就称做继承，其中一个类成为子类，另一个类称为父类
    b.如何实现继承
      i.    将多个子类公共的属性或方法分离放到父类中，具有个性或者行为的成员放在子类中了，通过extends继承的方式，不但拥有谷类共有的属性和方法，同时还拥有个性化的行为
      ii.   public  class SubClass extends BaseClass{}
    c.继承的特性
      i.    子类拥有父类的属性和方法，子类还有个性和独特的行为
      ii.   层次结构清晰简单，节省代码
      iii.  子类与父类构造方法执行顺序，先父类，后子类
      iv.   父子类常规需要编写默认构造方法和带参构造方法
      v.    重写：子类重写父类方法的实现，通过将父类被重写方法设置为抽象方法abstract

2.super
    a.子类中引用父类

3.多态：
    a.概念：多种形态
    b.体现
      i.    重载
      ii.   重写
      iii.  引用的多态性
    c.引用的多态性
      i.    定义对象时，用父类对象指向子类对象，建立父类对子类的一个引用
      ii.   作为方法的参数：用父类对象作为方法的形参，调用方法时，用子类对象作为实参
    d.优势
      i.    减少实现的细节
      ii.   动态调用对象，在执行时进行动态调用具体的对象，编译时不须考虑
    e.注意事项
      i.    一定时父类指向子类对象：父类类型对象=子类类型对象，不能反过来
      ii.   如果让子类指向父类，必须要强制转换，同时为了安全，需要进行类型判断，使用关键字instanceof； 强制转换：（子类类型） 父类对象
      iii.  instanceof: 语法  对象  instanceof  类型
4.abstract
    a.特征
      i.    没有具体的实现
      ii.   不能直接使用
      iii.  只能重写或继承 
    b.使用 范围
      i.    方法：抽象方法，没有方法实体
      ii.   类：抽象类，不能实例化对象
    c. 抽象方法：访问修饰符 abstract 方法名(参数列表)
    d. 抽象类：public avstract class 类名
    e.注意事项
      i.抽象类不能实例化对象，只能用于继承使用
      ii.抽象类中的抽象方法不能直接使用，只能通过子类重写之后才能使用
      iii.子类继承父类，必须实现所有抽象方法，否则该子类也将是一个抽象类
      iv.有抽象方法的类一定是抽象类，抽象类不一定要有抽象方法
      v.构造方法不能是抽象的，静态方法也不能是抽象的
      vi.构造方法不能被继承,也不能被重写,只能重载
      vii.Java中的类只能单继承，不能多继承（一个类继承多个类）

5.接口Interface
    a.概念：接口是编程中的一种定义好的规范和标准，所有实现该接口的子类必须遵从统一的规范和标准，否则，就不能实现接口
    b.特点
      i.  Java中的接口本来与抽象类是一个概念,出现接口主要是为了多继承
      ii. 一个类智能继承一个父类,但同时可以实现多个接口
      iii.接口不能实例化对象
      iv.实现接口的子类必须实现所有的接口方法,否则该子类一定是一个抽象类
        1.public 子类 extends 父类 implements 接口1,接口2,...,接口n;

    c.定义接口
      i.  public interface 接口名称{},但其他同类一样
      ii. 接口成员
        1.  抽象方法:接口方法中的默认是共欧诺个的并且是抽象的
          a.public abstract 返回类型 方法名();
          b.public 返回类型 方法名();
          c.返回类型 方法名();
        2.常量
          a.public static final 数据类型 常量名称=值
          b.数据类型 常量名称=值;
        
6.接口与抽象类的区别
    i.相同点
      1.  不能实例化对象
      2.  都支持引用的多态性
    ii.不同点
      1.  一个类只能继承一个抽象类,但可以实现多个接口
      2.  抽象类可以有实现方法,但接口不能有实现方法
      3.  抽象类有构造方法,但接口不能有构造方法

7.final关键字
    概念:最终的



    d.特性
      i.    可以被多继承
      ii.   设计和实现完全分离
      iii.  更自然的使用多态
      iv.   更容易搭建程序框架
      v.    更容易更换实现

系统开发步骤:
	1.明确需求
	2.设计对象保存信息
	3.设计技术框架
		采用Java技术
	4.编码顺序
		i.数据初始化
		ii.菜单切换
		iii.完成各种DVD管理操作
	5.测试

界面交互设计的原则
	1.统一性原则
		i.界面风格统一
		